{
  "hash": "2c87fd6b2160a0e6e82f132ff958832d",
  "result": {
    "markdown": "# Detect and correct outliers in signals\n\nThis chapter describes functionality for detecting and correcting outliers in\nsignals in the `detect_outlr()` and `correct_outlr()` functions provided in the\n`epiprocess` package. These functions is designed to be modular and extendable,\nso that you can define your own outlier detection and correction routines and\napply them to `epi_df` objects. We'll demonstrate this using state-level daily\nreported COVID-19 case counts from FL and NJ.\n\n\n\n\n::: {.cell layout-align=\"center\" hash='outliers_cache/html/unnamed-chunk-2_a04e38e37e2a0cee4145786b428621e0'}\n\n```{.r .cell-code}\nx <- incidence_num_outlier_example\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='outliers_cache/html/unnamed-chunk-3_eeb1c583efb1d858ceb57a9c288edf2e'}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(x, aes(x = time_value, y = cases, color = geo_value)) +\n  geom_line() +\n  scale_color_manual(values = c(3, 6)) +\n  geom_hline(yintercept = 0, linetype = 3) +\n  facet_wrap(~geo_value, scales = \"free_y\", ncol = 1) +\n  scale_x_date(minor_breaks = \"month\", date_labels = \"%b %Y\") +\n  labs(x = \"Date\", y = \"Reported COVID-19 counts\")\n```\n\n::: {.cell-output-display}\n![](outliers_files/figure-html/unnamed-chunk-3-1.svg){fig-align='center' width=90%}\n:::\n:::\n\n\nThere are multiple outliers in these data that a modeler may want to detect and\ncorrect. We'll discuss those two tasks in turn.\n\n## Outlier detection\n\nThe `detect_outlr()` function allows us to run multiple outlier detection\nmethods on a given signal, and then (optionally) combine the results from those\nmethods. Here, we'll investigate outlier detection results from the following\nmethods.\n\n1. Detection based on a rolling median, using `detect_outlr_rm()`, which \n  computes a rolling median on with a default window size of `n` time points \n  centered at the time point under consideration, and then computes thresholds \n  based on a multiplier times a rolling IQR computed on the residuals. \n2. Detection based on a seasonal-trend decomposition using LOESS (STL), using\n  `detect_outlr_stl()`, which is similar to the rolling median method but \n  replaces the rolling median with fitted values from STL. \n3. Detection based on an STL decomposition, but without seasonality term, which\n  amounts to smoothing using LOESS.\n\nThe outlier detection methods are specified using a `tibble` that is passed to\n`detect_outlr()`, with one row per method, and whose columms specify the\noutlier detection function, any input arguments (only nondefault values need to\nbe supplied), and an abbreviated name for the method used in tracking results.\nAbbreviations \"rm\" and \"stl\" can be used for the built-in detection functions \n`detect_outlr_rm()` and `detect_outlr_stl()`, respectively.\n\n\n::: {.cell layout-align=\"center\" hash='outliers_cache/html/unnamed-chunk-4_d718f9b3ce1f2b62cbbefda0c73956dc'}\n\n```{.r .cell-code}\ndetection_methods <- bind_rows(\n  tibble(\n    method = \"rm\",\n    args = list(list(\n      detect_negatives = TRUE,\n      detection_multiplier = 2.5\n    )),\n    abbr = \"rm\"\n  ),\n  tibble(\n    method = \"stl\",\n    args = list(list(\n      detect_negatives = TRUE,\n      detection_multiplier = 2.5,\n      seasonal_period = 7\n    )),\n    abbr = \"stl_seasonal\"\n  ),\n  tibble(\n    method = \"stl\",\n    args = list(list(\n      detect_negatives = TRUE,\n      detection_multiplier = 2.5,\n      seasonal_period = NULL\n    )),\n    abbr = \"stl_nonseasonal\"\n  )\n)\n\ndetection_methods\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 3 × 3\n#>   method args             abbr           \n#>   <chr>  <list>           <chr>          \n#> 1 rm     <named list [2]> rm             \n#> 2 stl    <named list [3]> stl_seasonal   \n#> 3 stl    <named list [3]> stl_nonseasonal\n```\n:::\n:::\n\n\nAdditionally, we'll form combined lower and upper thresholds, calculated as the\nmedian of the lower and upper thresholds from the methods at each time point.\nNote that using this combined median threshold is equivalent to using a majority\nvote across the base methods to determine whether a value is an outlier.\n\n\n::: {.cell layout-align=\"center\" hash='outliers_cache/html/unnamed-chunk-5_8b0c1909c0789a5ed4ad41dc03bdbcc0'}\n\n```{.r .cell-code}\nx <- x %>%\n  group_by(geo_value) %>%\n  mutate(\n    outlier_info = detect_outlr(\n      x = time_value, y = cases,\n      methods = detection_methods,\n      combiner = \"median\"\n    )\n  ) %>%\n  ungroup() %>%\n  unnest(outlier_info)\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> An `epi_df` object, 730 x 15 with metadata:\n#> * geo_type  = state\n#> * time_type = day\n#> * as_of     = 2022-05-21 15:17:14\n#> \n#> # A tibble: 730 × 15\n#>   geo_value time_value cases rm_lower rm_upper rm_replacement\n#> * <chr>     <date>     <dbl>    <dbl>    <dbl>          <dbl>\n#> 1 fl        2020-06-01   667    345      2195             667\n#> 2 nj        2020-06-01   486     64.4     926.            486\n#> 3 fl        2020-06-02   617    406.     2169.            617\n#> 4 nj        2020-06-02   658    140.      841.            658\n#> 5 fl        2020-06-03  1317    468.     2142.           1317\n#> 6 nj        2020-06-03   541    216       756             541\n#> # ℹ 724 more rows\n#> # ℹ 9 more variables: stl_seasonal_lower <dbl>, stl_seasonal_upper <dbl>, …\n```\n:::\n:::\n\n\nTo visualize the results, we define a convenience function for and call it on \neach state separately (hidden below the fold).\n\n\n::: {.cell layout-align=\"center\" hash='outliers_cache/html/unnamed-chunk-6_b18b51621bf6de1276da27cedba0106c'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Plot outlier detection bands and/or points identified as outliers\nplot_outlr <- function(\n    x, signal, method_abbr, bands = TRUE, points = TRUE,\n    facet_vars = vars(geo_value), nrow = NULL, ncol = NULL,\n    scales = \"fixed\") {\n  # Convert outlier detection results to long format\n  signal <- rlang::enquo(signal)\n  x_long <- x %>%\n    pivot_longer(\n      cols = starts_with(method_abbr),\n      names_to = c(\"method\", \".value\"),\n      names_pattern = \"(.+)_(.+)\"\n    )\n\n  # Start of plot with observed data\n  p <- ggplot() +\n    geom_line(data = x, mapping = aes(x = time_value, y = !!signal))\n\n  # If requested, add bands\n  if (bands) {\n    p <- p + geom_ribbon(\n      data = x_long,\n      aes(\n        x = time_value, ymin = lower, ymax = upper,\n        color = method\n      ), fill = NA\n    )\n  }\n\n  # If requested, add points\n  if (points) {\n    x_detected <- x_long %>% filter((!!signal < lower) | (!!signal > upper))\n    p <- p + geom_point(\n      data = x_detected,\n      aes(\n        x = time_value, y = !!signal, color = method,\n        shape = method\n      )\n    )\n  }\n\n  # If requested, add faceting\n  if (!is.null(facet_vars)) {\n    p <- p + facet_wrap(facet_vars, nrow = nrow, ncol = ncol, scales = scales)\n  }\n\n  return(p)\n}\n```\n:::\n\n\nNow we produce plots for each state at a time, faceting by the detection method.\n\n\n::: {.cell layout-align=\"center\" hash='outliers_cache/html/unnamed-chunk-7_5405f07bf3cd51cfe2ca67bccef65fe0'}\n\n```{.r .cell-code  code-fold=\"true\"}\nmethod_abbr <- c(detection_methods$abbr, \"combined\")\n\nplot_outlr(x %>% filter(geo_value == \"fl\"), cases, method_abbr,\n  facet_vars = vars(method), scales = \"free_y\", ncol = 2\n) +\n  scale_x_date(minor_breaks = \"month\", date_labels = \"%b %Y\") +\n  labs(\n    x = \"Date\", y = \"Reported COVID-19 counts\", color = \"Method\",\n    shape = \"Method\"\n  ) +\n  scale_color_brewer(palette = \"Set1\") +\n  ggtitle(\"Florida\") +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](outliers_files/figure-html/unnamed-chunk-7-1.svg){fig-align='center' width=90%}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nplot_outlr(x %>% filter(geo_value == \"nj\"), cases, method_abbr,\n  facet_vars = vars(method), scales = \"free_y\", ncol = 2\n) +\n  scale_x_date(minor_breaks = \"month\", date_labels = \"%b %Y\") +\n  labs(\n    x = \"Date\", y = \"Reported COVID-19 counts\", color = \"Method\",\n    shape = \"Method\"\n  ) +\n  scale_color_brewer(palette = \"Set1\") +\n  ggtitle(\"New Jersey\") +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](outliers_files/figure-html/unnamed-chunk-7-2.svg){fig-align='center' width=90%}\n:::\n:::\n\n\n## Outlier correction\n\nFinally, in order to correct outliers, we can use the posited replacement values\nreturned by each outlier detection method. Below we use the replacement value\nfrom the combined method, which is defined by the median of replacement values \nfrom the base methods at each time point.\n\n\n::: {.cell layout-align=\"center\" hash='outliers_cache/html/unnamed-chunk-8_747bff7bae49f5f0304632fd3b1558a9'}\n\n```{.r .cell-code}\ny <- x %>%\n  mutate(cases_corrected = combined_replacement) %>%\n  select(geo_value, time_value, cases, cases_corrected)\n\ny %>% filter(cases != cases_corrected)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> An `epi_df` object, 22 x 4 with metadata:\n#> * geo_type  = state\n#> * time_type = day\n#> * as_of     = 2022-05-21 15:17:14\n#> \n#> # A tibble: 22 × 4\n#>   geo_value time_value cases cases_corrected\n#> * <chr>     <date>     <dbl>           <dbl>\n#> 1 fl        2020-07-12 15300          10181 \n#> 2 nj        2020-07-19    -8            320.\n#> 3 nj        2020-08-13   694            404.\n#> 4 nj        2020-08-14   619            397.\n#> 5 nj        2020-08-16    40            366 \n#> 6 nj        2020-08-22   555            360 \n#> # ℹ 16 more rows\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='outliers_cache/html/unnamed-chunk-9_d88f9e8692dcd1d4f7b70de883a83a80'}\n\n```{.r .cell-code  code-fold=\"true\"}\ny %>%\n  pivot_longer(starts_with(\"cases\")) %>%\n  ggplot(aes(x = time_value)) +\n  geom_line(aes(y = value, color = name, linetype = name)) +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_linetype_manual(values = c(2, 1)) +\n  geom_hline(yintercept = 0) +\n  facet_wrap(vars(geo_value), scales = \"free_y\", ncol = 1) +\n  scale_x_date(minor_breaks = \"month\", date_labels = \"%b %Y\") +\n  labs(x = \"Date\", y = \"Reported COVID-19 counts\") +\n  theme(legend.position = \"bottom\", legend.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](outliers_files/figure-html/unnamed-chunk-9-1.svg){fig-align='center' width=90%}\n:::\n:::\n\n\nMore advanced correction functionality will be coming at some point in the \nfuture. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}