{
  "hash": "581a82e7d09ad8a4454b6d07d65c6e0c",
  "result": {
    "markdown": "---\ntoc-depth: 2\nnocite: |\n  @*\n---\n\n\n# Preface {.unnumbered}\n\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-caution}\nThis book is still under construction and may not yet be fully self-contained or reproducible. But it hopefully will be!\n:::\n\nThis book describes some of the functionality of the\n`{epiprocess}` and `{epipredict}` R packages, with an eye toward creating various types of signal processing and forecast creation for epidemiological data. The goal is to be able to load, inspect, process, and forecast\n --- using simple baselines to more elaborate customizations. \n\n## Installation {#sec-installation}\n\n\n\nThe following commands install the latest versions of the packages we use in this book:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-2_ef21555fe232decfa5c5e6ce81cfc532'}\n\n```{.r .cell-code}\n# install.packages(\"pak\")\n\n# Install our packages from GitHub:\npak::pkg_install(\"cmu-delphi/epidatr\")\npak::pkg_install(\"cmu-delphi/epiprocess\")\npak::pkg_install(\"cmu-delphi/epipredict\")\npak::pkg_install(\"cmu-delphi/epidatasets\")\n# Other model-fitting packages we use in this book (via epipredict):\npak::pkg_install(\"poissonreg\")\npak::pkg_install(\"ranger\")\npak::pkg_install(\"xgboost\")\n# Other data processing, model evaluation, example data, and other packages we\n# use in this book:\npak::pkg_install(\"RcppRoll\")\npak::pkg_install(\"tidyverse\")\npak::pkg_install(\"tidymodels\")\npak::pkg_install(\"broom\")\npak::pkg_install(\"performance\")\npak::pkg_install(\"modeldata\")\npak::pkg_install(\"see\")\npak::pkg_install(\"sessioninfo\")\n```\n:::\n\n\nMuch of the data used for illustration can be loaded directly from [Delphi's Epidata API](https://cmu-delphi.github.io/delphi-epidata/) which is built and maintained by the Carnegie Mellon University [Delphi research group](https://delphi.cmu.edu/). We have tried to provide most of the data used in these examples in a separate package, `{epidatasets}`, but it can also be accessed using `{epidatr}`, an R interface to the API and the successor to [`{covidcast}`](https://cmu-delphi.github.io/covidcast/covidcastR/). These are also available from GitHub:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-3_6a7154f9225b9bd3d6ffa321b2da25af'}\n\n```{.r .cell-code}\npak::pkg_install(\"cmu-delphi/epidatasets\")\npak::pkg_install(\"cmu-delphi/epidatr\")\n```\n:::\n\n\n\n<details> <summary> Encountering installation issues?  Click here to show some potential solutions. </summary>\n\n### Linux installation issues: compilation errors or slowness\n\nIf you are using Linux and encounter any compilation errors above, or if\ncompilation is taking very long, you might try using the RStudio (now called\nPosit) Package Manager to install binaries. You can try running this command\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-4_1c0021dec1f71a9fdbdd1a577b67f72a'}\n\n```{.r .cell-code}\noptions(\n  repos = c(\n    # contains binaries for Linux:\n    RSPM = \"https://packagemanager.rstudio.com/all/latest\",\n    # backup CRAN mirror of your choice:\n    CRAN = \"https://cran.rstudio.com/\"\n  )\n)\n```\n:::\n\n\n### Reproducibility\n\nThe above commands will give you the current versions of the packages used in\nthis book. If you're having trouble reproducing some of the results, it may be\ndue to package updates that took place after the book was last updated. To match\nthe versions we used to generate this book, you can use the steps below.\n\n#### First: set up and store a GitHub PAT\n\nIf you don't already have a GitHub PAT, you can use the following helper functions to create one:\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-5_8e6231bc239928b163de90b8ac90ad95'}\n\n```{.r .cell-code}\n# Run this once:\ninstall.packages(\"usethis\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Installing usethis [2.2.2] ...\n#> \tOK [linked cache in 0.21 milliseconds]\n#> * Installed 1 package in 1.2 seconds.\n```\n:::\n\n```{.r .cell-code}\nusethis::create_github_token(\n  scopes = \"public_repo\",\n  description = \"For public repo access\"\n)\n```\n:::\n\nThis will open a web browser window allowing you to describe and customize\nsettings of the PAT. Scroll to the bottom and click \"Generate\ntoken\".  You'll see a screen that has `ghp_<lots of letters and numbers>` with a green background; you can click the two-squares (\"copy\") icon to copy this `ghp_......` string to the clipboard.\n\n#### Either A: Download and use the `renv.lock`\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-6_298fc2b073cbedc2c6a201948f33aed0'}\n\n```{.r .cell-code}\n# Run this once:\ninstall.packages(c(\"renv\", \"gitcreds\"))\ndownload.file(\"https://raw.githubusercontent.com/cmu-delphi/delphi-tooling-book/main/renv.lock\", \"delphi-tooling-book.renv.lock\")\n\n# Run this in a fresh session each time you'd like to use this set of versions.\n# Warning: don't save your GitHub PAT in a file you might share with others;\n# look into `gitcreds::gitcreds_set()` or `usethis::edit_r_environ()` instead.\nSys.setenv(\"GITHUB_PAT\" = \"ghp_............\")\nrenv::use(lockfile = \"delphi-tooling-book.renv.lock\")\n# If you get 401 errors, you may need to regenerate your GitHub PAT or check if\n# `gitcreds::gitcreds_get()` is detecting an old PAT you have saved somewhere.\n```\n:::\n\n\n#### Or B: Download the book and use its `.Rprofile`\n\n1. Download the book [here](https://github.com/cmu-delphi/delphi-tooling-book/archive/refs/heads/main.zip) and unzip it.\n2. One-time setup: launch R inside the delphi-tooling-book directory (to use its\n   `.Rprofile` file) and run\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-7_5f193d921c8c0c99eb8e67696fb70a8b'}\n\n```{.r .cell-code}\n# Warning: don't save your GitHub PAT in a file you might share with others;\n# look into `gitcreds::gitcreds_set()` or `usethis::edit_r_environ()` instead.\nSys.setenv(\"GITHUB_PAT\" = \"ghp_............\")\nrenv::restore() # downloads the appropriate package versions\n```\n:::\n\n\n3. To use this set of versions: launch R inside the delphi-tooling-book directory.\n\n### Other issues\n\nPlease let us know!  You can file an issue with the book [here](https://github.com/cmu-delphi/delphi-tooling-book/issues), or with one of the individual packages at their own issue pages: [epidatr](https://github.com/cmu-delphi/epidatr/issues), [epiprocess](https://github.com/cmu-delphi/epiprocess/issues), [epipredict](https://github.com/cmu-delphi/epipredict/issues).\n\n</details>\n\n\n## Documentation\n\nYou can view the complete documentation for these packages at \n\n* <https://cmu-delphi.github.io/epipredict>,\n* <https://cmu-delphi.github.io/epiprocess>,\n* <https://cmu-delphi.github.io/epidatasets>,\n* <https://cmu-delphi.github.io/epidatr>.\n\n## Attribution\n\nThis document contains a number of datasets that are a modified part of the [COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University](https://github.com/CSSEGISandData/COVID-19) as [republished in the COVIDcast Epidata API](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/jhu-csse.html). These data are licensed under the terms of the [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by/4.0/) by the Johns Hopkins University on behalf of its Center for Systems Science in Engineering. Copyright Johns Hopkins University 2020.\n\n[From the COVIDcast Epidata API](https://cmu-delphi.github.io/delphi-epidata/api/covidcast-signals/jhu-csse.html): \n These signals are taken directly from the JHU CSSE [COVID-19 GitHub repository](https://github.com/CSSEGISandData/COVID-19) without changes. \n\n\n\n## Quick-start example\n\nThese packages come with some built-in historical data for illustration, but\nup-to-date versions could be downloaded with the\n[`{epidatr}`](https://cmu-delphi.github.io/epidatr) or \n[`{covidcast}`](https://cmu-delphi.github.io/covidcast/covidcastR/index.html) \npackages and processed using\n[`{epiprocess}`](https://cmu-delphi.github.io/epiprocess/).[^index1]\n\n[^index1]: COVIDcast data and other epidemiological signals for non-Covid related illnesses are available with [`{epidatr}`](https://cmu-delphi.github.io/epidatr), which interfaces directly to Delphi's [Epidata API](https://cmu-delphi.github.io/delphi-epidata/).\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/epidf_48a293db285163cbde5b55b5d6115276'}\n\n```{.r .cell-code}\nlibrary(epipredict)\njhu <- case_death_rate_subset\njhu\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> An `epi_df` object, 20,496 x 4 with metadata:\n#> * geo_type  = state\n#> * time_type = day\n#> * as_of     = 2022-05-31 12:08:25\n#> \n#> # A tibble: 20,496 × 4\n#>   geo_value time_value case_rate death_rate\n#> * <chr>     <date>         <dbl>      <dbl>\n#> 1 ak        2020-12-31      35.9      0.158\n#> 2 al        2020-12-31      65.1      0.438\n#> 3 ar        2020-12-31      66.0      1.27 \n#> 4 as        2020-12-31       0        0    \n#> 5 az        2020-12-31      76.8      1.10 \n#> 6 ca        2020-12-31      96.0      0.751\n#> # ℹ 20,490 more rows\n```\n:::\n:::\n\n\nTo create and train a simple auto-regressive forecaster to predict the death rate two weeks into the future using past (lagged) deaths and cases, we could use the following function.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/make-forecasts_1d4f30fdea1cd893cb39553fa0f1d21c'}\n\n```{.r .cell-code}\ntwo_week_ahead <- arx_forecaster(\n  jhu,\n  outcome = \"death_rate\",\n  predictors = c(\"case_rate\", \"death_rate\"),\n  args_list = arx_args_list(\n    lags = list(case_rate = c(0, 1, 2, 3, 7, 14), death_rate = c(0, 7, 14)),\n    ahead = 14\n  )\n)\n```\n:::\n\n\nIn this case, we have used a number of different lags for the case rate, while only using 3 weekly lags for the death rate (as predictors). The result is both a fitted model object which could be used any time in the future to create different forecasts, as well as a set of predicted values (and prediction intervals) for each location 14 days after the last available time value in the data.\n\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/print-model_f5f6b4212b46903845381e0a40889efc'}\n\n```{.r .cell-code}\ntwo_week_ahead$epi_workflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> ══ Epi Workflow [trained] ═══════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: linear_reg()\n#> Postprocessor: Frosting\n#> \n#> ── Preprocessor ─────────────────────────────────────────────────────────────\n#> 6 Recipe Steps\n#> \n#> \n#> ── Model ────────────────────────────────────────────────────────────────────\n#> \n#> Call:\n#> stats::lm(formula = ..y ~ ., data = data)\n#> \n#> Coefficients:\n#>       (Intercept)    lag_0_case_rate    lag_1_case_rate    lag_2_case_rate  \n#>        -0.0073358          0.0030365          0.0012467          0.0009536  \n#>   lag_3_case_rate    lag_7_case_rate   lag_14_case_rate   lag_0_death_rate  \n#>         0.0011425          0.0012481          0.0003041          0.1351769  \n#>  lag_7_death_rate  lag_14_death_rate  \n#>         0.1471127          0.1062473  \n#> \n#> ── Postprocessor ────────────────────────────────────────────────────────────\n#> 5 Frosting Layers\n```\n:::\n:::\n\n\nThe fitted model here involved preprocessing the data to appropriately generate lagged predictors, estimating a linear model with `stats::lm()` and then postprocessing the results to be meaningful for epidemiological tasks. We can also examine the predictions.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/show-preds_4bf0ca6ef427c01aa0a0686ab430f93d'}\n\n```{.r .cell-code}\ntwo_week_ahead$predictions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 56 × 5\n#>   geo_value .pred        .pred_distn forecast_date target_date\n#>   <chr>     <dbl>             <dist> <date>        <date>     \n#> 1 ak        0.449 quantiles(0.45)[2] 2021-12-31    2022-01-14 \n#> 2 al        0.574 quantiles(0.57)[2] 2021-12-31    2022-01-14 \n#> 3 ar        0.673 quantiles(0.67)[2] 2021-12-31    2022-01-14 \n#> 4 as        0     quantiles(0.12)[2] 2021-12-31    2022-01-14 \n#> 5 az        0.679 quantiles(0.68)[2] 2021-12-31    2022-01-14 \n#> 6 ca        0.575 quantiles(0.57)[2] 2021-12-31    2022-01-14 \n#> # ℹ 50 more rows\n```\n:::\n:::\n\n\nThe results above show a distributional forecast produced using data through the end of 2021 for the 14th of January 2022. A prediction for the death rate per 100K inhabitants is available for every state (`geo_value`) along with a 90% predictive interval. The figure below\ndisplays the forecast for a small handful of states. The vertical black line is the forecast date. The forecast doesn't appear to be particularly good, but our choices above were intended to be illustrative of the functionality rather than optimized for accuracy.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-8_1204ca19d449319e90b2fd3763e63dfd'}\n\n```{.r .cell-code  code-fold=\"true\"}\nsamp_geos <- c(\"ca\", \"co\", \"ny\", \"pa\")\n\nhist <- jhu %>%\n  filter(\n    geo_value %in% samp_geos,\n    time_value >= max(time_value) - 90L\n  )\n\npreds <- two_week_ahead$predictions %>%\n  filter(geo_value %in% samp_geos) %>%\n  pivot_quantiles_wider(.pred_distn)\n\nggplot(hist, aes(color = geo_value)) +\n  geom_line(aes(time_value, death_rate)) +\n  theme_bw() +\n  geom_errorbar(data = preds, aes(x = target_date, ymin = `0.05`, ymax = `0.95`)) +\n  geom_point(data = preds, aes(target_date, .pred)) +\n  geom_vline(data = preds, aes(xintercept = forecast_date)) +\n  scale_colour_viridis_d(name = \"\") +\n  scale_x_date(date_labels = \"%b %Y\") +\n  theme(legend.position = \"bottom\") +\n  labs(x = \"\", y = \"Incident deaths per 100K\\n inhabitants\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.svg){fig-align='center' width=90%}\n:::\n:::\n\n\n## Contents\n\nThe remainder of this book examines this software in more detail, illustrating some of the flexibility that is available.\n\n---\n\n<details> <summary> Session Information. </summary>\n\nSee also @sec-installation.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-9_c866f0d1d0a1809a33be44cd8b8eec3f'}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> ─ Session info ────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.1.3 (2022-03-10)\n#>  os       Fedora Linux 36 (Workstation Edition)\n#>  system   x86_64, linux-gnu\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       America/Los_Angeles\n#>  date     2023-12-15\n#>  pandoc   2.14.0.3 @ /usr/bin/ (via rmarkdown)\n#> \n#> ─ Packages ────────────────────────────────────────────────────────────────\n#>  ! package        * version    date (UTC) lib source\n#>  P anytime          0.3.9      2020-08-27 [?] RSPM (R 4.1.3)\n#>  P askpass          1.1        2019-01-13 [?] CRAN (R 4.0.5)\n#>  P backports        1.4.1      2021-12-13 [?] CRAN (R 4.0.5)\n#>  P cachem           1.0.8      2023-05-01 [?] RSPM (R 4.1.3)\n#>  P checkmate        2.2.0      2023-04-27 [?] RSPM (R 4.1.3)\n#>  P class            7.3-22     2023-05-03 [?] CRAN (R 4.1.3)\n#>  P cli              3.6.1      2023-03-23 [?] RSPM (R 4.1.3)\n#>  P codetools        0.2-19     2023-02-01 [?] RSPM (R 4.1.3)\n#>  P colorspace       2.1-0      2023-01-23 [?] RSPM (R 4.1.3)\n#>  P crayon           1.5.2      2022-09-29 [?] RSPM\n#>  P data.table       1.14.8     2023-02-17 [?] RSPM (R 4.1.3)\n#>  P digest           0.6.31     2022-12-11 [?] RSPM (R 4.1.3)\n#>  P distributional   0.3.2      2023-03-22 [?] RSPM (R 4.1.3)\n#>  P dplyr          * 1.1.2      2023-04-20 [?] RSPM (R 4.1.3)\n#>  P ellipsis         0.3.2      2021-04-29 [?] CRAN (R 4.0.5)\n#>  P epidatasets    * 0.0.1      2023-06-20 [?] Github (cmu-delphi/epidatasets@cc8f2a0)\n#>  P epidatr        * 1.0.0.9000 2023-12-15 [?] Github (cmu-delphi/epidatr@6e9f899)\n#>  P epipredict     * 0.0.6      2023-11-08 [?] Github (cmu-delphi/epipredict@378577a)\n#>  P epiprocess     * 0.7.0.9999 2023-12-15 [?] Github (cmu-delphi/epiprocess@b444a3c)\n#>  P evaluate         0.21       2023-05-05 [?] RSPM (R 4.1.3)\n#>  P fansi            1.0.4      2023-01-22 [?] RSPM (R 4.1.3)\n#>  P farver           2.1.1      2022-07-06 [?] RSPM (R 4.1.3)\n#>  P fastmap          1.1.1      2023-02-24 [?] RSPM (R 4.1.3)\n#>  P forcats        * 1.0.0      2023-01-29 [?] RSPM\n#>  P fs               1.6.2      2023-04-25 [?] RSPM (R 4.1.3)\n#>  P future           1.32.0     2023-03-07 [?] RSPM\n#>  P future.apply     1.11.0     2023-05-21 [?] RSPM\n#>  P generics         0.1.3      2022-07-05 [?] RSPM (R 4.1.3)\n#>  P ggplot2        * 3.4.2      2023-04-03 [?] RSPM (R 4.1.3)\n#>  P globals          0.16.2     2022-11-21 [?] RSPM (R 4.1.3)\n#>  P glue             1.6.2      2022-02-24 [?] CRAN (R 4.0.5)\n#>  P gower            1.0.1      2022-12-22 [?] RSPM\n#>  P gtable           0.3.3      2023-03-21 [?] RSPM (R 4.1.3)\n#>  P hardhat          1.3.0      2023-03-30 [?] RSPM (R 4.1.3)\n#>  P hms              1.1.3      2023-03-21 [?] RSPM\n#>  P htmltools        0.5.5      2023-03-23 [?] RSPM (R 4.1.3)\n#>  P httr             1.4.6      2023-05-08 [?] CRAN (R 4.1.3)\n#>  P ipred            0.9-14     2023-03-09 [?] RSPM\n#>  P jsonlite         1.8.5      2023-06-05 [?] RSPM (R 4.1.3)\n#>  P knitr            1.43       2023-05-25 [?] RSPM (R 4.1.3)\n#>  P labeling         0.4.2      2020-10-20 [?] CRAN (R 4.0.5)\n#>  P lattice          0.21-8     2023-04-05 [?] RSPM (R 4.1.3)\n#>  P lava             1.7.2.1    2023-02-27 [?] RSPM\n#>  P lifecycle        1.0.3      2022-10-07 [?] RSPM (R 4.1.3)\n#>  P listenv          0.9.0      2022-12-16 [?] RSPM\n#>  P lubridate      * 1.9.2      2023-02-10 [?] CRAN (R 4.1.3)\n#>  P magrittr         2.0.3      2022-03-30 [?] CRAN (R 4.0.5)\n#>  P MASS             7.3-60     2023-05-04 [?] RSPM (R 4.1.3)\n#>  P Matrix           1.5-4      2023-04-04 [?] CRAN (R 4.1.3)\n#>  P MatrixModels     0.5-1      2022-09-11 [?] RSPM (R 4.1.3)\n#>  P MMWRweek         0.1.3      2020-04-22 [?] RSPM (R 4.1.3)\n#>  P munsell          0.5.0      2018-06-12 [?] CRAN (R 4.0.5)\n#>  P nnet             7.3-19     2023-05-03 [?] RSPM (R 4.1.3)\n#>  P openssl          2.0.6      2023-03-09 [?] RSPM (R 4.1.3)\n#>  P parallelly       1.36.0     2023-05-26 [?] RSPM\n#>  P parsnip        * 1.1.0      2023-04-12 [?] RSPM (R 4.1.3)\n#>  P pillar           1.9.0      2023-03-22 [?] RSPM (R 4.1.3)\n#>  P pkgconfig        2.0.3      2019-09-22 [?] CRAN (R 4.1.3)\n#>  P prodlim          2023.03.31 2023-04-02 [?] RSPM\n#>  P purrr          * 1.0.1      2023-01-10 [?] RSPM (R 4.1.3)\n#>  P quantreg         5.95       2023-04-08 [?] RSPM (R 4.1.3)\n#>  P R.cache          0.16.0     2022-07-21 [?] RSPM (R 4.1.3)\n#>  P R.methodsS3      1.8.2      2022-06-13 [?] RSPM (R 4.1.3)\n#>  P R.oo             1.25.0     2022-06-12 [?] RSPM (R 4.1.3)\n#>  P R.utils          2.12.2     2022-11-11 [?] RSPM (R 4.1.3)\n#>  P R6               2.5.1      2021-08-19 [?] CRAN (R 4.0.5)\n#>  P Rcpp             1.0.10     2023-01-22 [?] RSPM (R 4.1.3)\n#>  P readr          * 2.1.4      2023-02-10 [?] RSPM\n#>  P recipes          1.0.6      2023-04-25 [?] RSPM (R 4.1.3)\n#>  P renv             0.17.3     2023-04-06 [?] RSPM (R 4.1.3)\n#>  P rlang            1.1.1      2023-04-28 [?] RSPM (R 4.1.3)\n#>  P rmarkdown        2.22       2023-06-01 [?] RSPM (R 4.1.3)\n#>  P rpart            4.1.19     2022-10-21 [?] RSPM (R 4.1.3)\n#>  P rstudioapi       0.14       2022-08-22 [?] RSPM (R 4.1.3)\n#>  P scales           1.2.1      2022-08-20 [?] RSPM (R 4.1.3)\n#>  P sessioninfo      1.2.2      2021-12-06 [?] CRAN (R 4.1.3)\n#>  P smoothqr         0.1.1      2023-06-20 [?] Github (dajmcdon/smoothqr@3def5f0)\n#>  P SparseM          1.81       2021-02-18 [?] RSPM (R 4.1.3)\n#>  P stringi          1.7.12     2023-01-11 [?] RSPM (R 4.1.3)\n#>  P stringr        * 1.5.0      2022-12-02 [?] RSPM (R 4.1.3)\n#>  P styler           1.10.1     2023-06-05 [?] RSPM (R 4.1.3)\n#>  P survival         3.5-5      2023-03-12 [?] RSPM (R 4.1.3)\n#>  P tibble         * 3.2.1      2023-03-20 [?] RSPM (R 4.1.3)\n#>  P tidyr          * 1.3.0      2023-01-24 [?] RSPM (R 4.1.3)\n#>  P tidyselect       1.2.0      2022-10-10 [?] RSPM (R 4.1.3)\n#>  P tidyverse      * 2.0.0      2023-02-22 [?] RSPM\n#>  P timechange       0.2.0      2023-01-11 [?] CRAN (R 4.1.3)\n#>  P timeDate         4022.108   2023-01-07 [?] RSPM\n#>  P tsibble          1.1.3      2022-10-09 [?] RSPM (R 4.1.3)\n#>  P tzdb             0.4.0      2023-05-12 [?] RSPM (R 4.1.3)\n#>  P usethis          2.2.2      2023-07-06 [?] RSPM (R 4.1.3)\n#>  P utf8             1.2.3      2023-01-31 [?] RSPM (R 4.1.3)\n#>  P vctrs            0.6.2      2023-04-19 [?] CRAN (R 4.1.3)\n#>  P viridisLite      0.4.2      2023-05-02 [?] RSPM (R 4.1.3)\n#>  P withr            2.5.0      2022-03-03 [?] CRAN (R 4.0.5)\n#>  P workflows        1.1.3      2023-02-22 [?] RSPM (R 4.1.3)\n#>  P xfun             0.39       2023-04-20 [?] RSPM (R 4.1.3)\n#>  P xml2             1.3.4      2023-04-27 [?] CRAN (R 4.1.3)\n#>  P yaml             2.3.7      2023-01-23 [?] RSPM (R 4.1.3)\n#> \n#>  [1] /home/fullname/.cache/R/renv/library/delphi-tooling-book-1266ecb6/R-4.1/x86_64-redhat-linux-gnu\n#>  [2] /home/fullname/.cache/R/renv/sandbox/R-4.1/x86_64-redhat-linux-gnu/60c4e220\n#> \n#>  P ── Loaded and on-disk path mismatch.\n#> \n#> ───────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n</details>\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}